stages:
  - build
  - test

default:
  image: ruby:3.1.2
  cache:
    paths:
      - vendor/ruby/
    policy: pull

.db:
  variables:
    POSTGRES_DB: openproject_test
    POSTGRES_USER: openproject_test
    POSTGRES_PASSWORD: ''
    POSTGRES_HOST_AUTH_METHOD: trust
    RAILS_ENV: test
    DISABLE_SPRING: 1
  services:
    - postgres:latest
  before_script:
    - ruby -v
    - bundle config set --local path 'vendor/ruby'
    - bundle install -j $(nproc)

    - mv config/database.yml.example config/database.yml
    - "echo '  host: postgres' >> config/database.yml"
    - "echo '  schema_dump: false' >> config/database.yml"
    - bundle exec rails db:migrate

build:
  stage: build
  cache:
    - key: ${CI_JOB_NAME}
      paths:
        - frontend/.npm/
      when: on_success
      policy: pull-push

    - paths:
        - apt-cache/
  before_script:
    - export APT_CACHE_DIR=`pwd`/apt-cache && mkdir -pv $APT_CACHE_DIR
    - apt-get update -qq && apt-get -o dir::cache::archives="$APT_CACHE_DIR" install -yqq nodejs npm
  script:
    - cd frontend && npm ci --cache .npm --prefer-offline
    - npm run build
  artifacts:
    paths:
      - public/

test:
  stage: test
  extends: .db
  needs:
    - job: build
      artifacts: true
  script:
    - OPENPROJECT_CLI_PROXY='' bundle exec rails s
